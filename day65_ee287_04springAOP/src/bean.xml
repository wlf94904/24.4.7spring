<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xmlns:aop="http://www.springframework.org/schema/aop"
    	xsi:schemaLocation="http://www.springframework.org/schema/beans
    						 http://www.springframework.org/schema/beans/spring-beans.xsd
    						 http://www.springframework.org/schema/aop
    						 http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--  配置service-->
	<bean id="customerService" class="com.itheima.service.impl.CustomerServiceImpl"></bean>
	<!-- 基于xml的aop配置步骤:要想使用spring的aop，必须导入aop的jar包 -->
	<!--第一步：把通知类交给spring来管理  -->
	<bean id="Logger" class="com.itheima.utils.Logger"></bean>

<!--  第二步：导入aop名称空间，并且使用aop:config开始aop的配置-->
	<aop:config>
		<!--  第三步：使用aop：aspect配置切面 id属性用于给切面提供一个唯一标识。ref属性：用于应用通知Bean的id-->
		<aop:aspect id="LogAdvice" ref="Logger">
			<!--  第四步：配置通知的类型，指定增强的方法何时执行。method属性：用于指定增强的方法名称 pointcut属性：用于指定切入点表达式-->
			<!--  切入点表达式：
					关键字：excution(表达式)
					表达式写法：
					访问修饰符 返回值 包名，包名。。。类名，方法名(参数列表)
					全匹配方式：
						public void com.itheima.service.impl.CustomerServiceImpl.saveCustomer()
					访问修饰符可以省略
						void com.itheima.service.impl.CustomerServiceImpl.saveCustomer()
					返回值可以使用通配符，表示任意返回值。通配符是*
						*com.itheima.service.impl.CustomerServiceImpl.saveCustomer()
					包名可以使用通配符，表示任意包，但是，有几个包就需要写几个*
						* *.*.*.*.CustomerServiceImpl.saveCustomer()
					包名可以使用..表示当前包及其子包
						* com..CustomerServiceImpl.saveCustomer()
					类名和方法名都可以使用通配符
						* com..*.*()
					参数列表可以使用具体类型，来表示参数类型
						基本类型可以直接写类型名称：int
						引用类型必须是包名.类名。java.lang.Integer
					参数列表可以使用通配符，表示任意参数类型，但是必须有参数
						* com..*.*(*)
					参数列表可以使用..表示有无参数均可，有参数可以是任意类型
						* com..*.*(..)
					全通配方式：
						* *..*.*(..)
					实际开发中，我们一般情况下，我们都是对业务层方法进行增强：
						所以写法：*com.itheima.service.impl.*.*(..)
					-->
			<aop:before method="printLog" pointcut="execution(* com.itheima.service.impl.*.*(..))"/>
			<aop:before method="printLog" pointcut="execution(* com.itheima.service.impl.*.*(..))"/>
			<aop:before method="printLog" pointcut="execution(* com.itheima.service.impl.*.*(..))"/>
			<aop:before method="printLog" pointcut="execution(* com.itheima.service.impl.*.*(..))"/>
			<aop:before method="printLog" pointcut="execution(* com.itheima.service.impl.*.*(..))"/>
		</aop:aspect>
	</aop:config>

</beans>